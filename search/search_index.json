{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Next.js is an open-source web development framework built on top of React, which enables web applications with server-side rendering and generating static websites.</p> <p></p>"},{"location":"#let-me-talk-about-history-of-nextjs1","title":"Let me talk about: History of Next.js1","text":"<p>Next.js was released by Vercel (formerly known as Zeit) in 2016. The framework was developed to address issues with React, which was popular at the time but had problems with accessibility, security, slow page loading times, and SEO.</p> <p>Next.js aimed to solve these issues, and has since gained popularity.</p> <p>In 2019, Google began contributing to the project. Today, many large websites such as Walmart, Apple, Nike, Net ix, TikTok, Uber, Lyft, and Starbucks use the framework.</p> <p>Next.js is often credited with completing React by o ering the following features:</p> <ul> <li>Server-Side Rendering</li> <li>Static Site Generation</li> <li>Image Optimization</li> <li>Built-in Routing</li> </ul> <p>These features have made Next.js a popular choice among developers looking to build powerful and performant web applications.</p>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Dynamic Trio by By Grace Huang, pg: 20</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"hoc/hooks-vs-hocs/","title":"Hooks vs HoC","text":""},{"location":"hoc/hooks-vs-hocs/#hooks-vs-hocs-which-is-better","title":"\u2705 Hooks vs HOCs: Which is Better?","text":"<p>You're right! Hooks are often better and more modern than HOCs for handling shared logic in React. However, both patterns have their place. Let me clarify:</p>"},{"location":"hoc/hooks-vs-hocs/#hocs-vs-hooks-key-differences","title":"\ud83c\udd9a HOCs vs Hooks: Key Differences","text":"Aspect Higher-Order Components (HOCs) Hooks Introduced in React 16.0 React 16.8 Code Reusability Wrap components to add functionality Reuse logic directly in functional components Complexity Can lead to wrapper hell (nested HOCs) Simpler and cleaner code Performance Slightly slower due to component wrapping Faster and more direct UI Manipulation Harder to manipulate UI inside HOCs Easier to control UI with hooks Stateful Logic Harder to manage complex state logic Hooks handle complex state elegantly Modern Approach Older pattern Recommended for new projects"},{"location":"hoc/hooks-vs-hocs/#example-data-fetching","title":"\ud83e\uddea Example: Data Fetching","text":"\ud83c\udfd7\ufe0f Using HOC for Data Fetching<pre><code>const withDataFetching = (WrappedComponent, url) =&gt; {\n  return (props) =&gt; {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() =&gt; {\n      fetch(url)\n        .then((response) =&gt; response.json())\n        .then((data) =&gt; {\n          setData(data);\n          setLoading(false);\n        });\n    }, [url]);\n\n    if (loading) return &lt;h2&gt;Loading...&lt;/h2&gt;;\n\n    return &lt;WrappedComponent {...props} data={data} /&gt;;\n  };\n};\n\nconst UserList = ({ data }) =&gt; (\n  &lt;ul&gt;\n    {data.map((user) =&gt; (\n      &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n    ))}\n  &lt;/ul&gt;\n);\n\nexport default withDataFetching(\n  UserList,\n  \"https://jsonplaceholder.typicode.com/users\"\n);\n</code></pre> \ud83d\ude80 Using Hooks for Data Fetching (Better Way)<pre><code>import { useState, useEffect } from \"react\";\n\nconst useFetchData = (url) =&gt; {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    fetch(url)\n      .then((response) =&gt; response.json())\n      .then((data) =&gt; {\n        setData(data);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return { data, loading };\n};\n\nconst UserList = () =&gt; {\n  const { data, loading } = useFetchData(\n    \"https://jsonplaceholder.typicode.com/users\"\n  );\n\n  if (loading) return &lt;h2&gt;Loading...&lt;/h2&gt;;\n\n  return (\n    &lt;ul&gt;\n      {data.map((user) =&gt; (\n        &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n};\n\nexport default UserList;\n</code></pre>"},{"location":"hoc/hooks-vs-hocs/#why-hooks-are-better-in-modern-react","title":"\ud83d\udd11 Why Hooks Are Better in Modern React:","text":"<ol> <li> <p>Cleaner Code:</p> <p>No need to create a separate wrapper component.</p> </li> <li> <p>Avoid Wrapper Hell:</p> <p>HOCs can cause nested components (wrapper hell), making your component tree harder to understand and debug.</p> </li> <li> <p>Flexible and Composable:</p> <p>Hooks are more flexible and easier to compose compared to HOCs. You can combine multiple hooks within a single component.</p> </li> <li> <p>Direct Access to State and Lifecycle:</p> <p>Hooks give direct access to state and lifecycle methods, making it easier to manage complex logic.</p> </li> </ol>"},{"location":"hoc/hooks-vs-hocs/#when-should-you-use-hocs","title":"\ud83d\udcda When Should You Use HOCs?","text":"<p>Despite hooks being better, there are some cases where HOCs are still useful:</p> <ul> <li>\u2705 Access Control (Authorization HOCs)</li> <li>\u2705 Adding Global Logic (Logging, Error Boundaries)</li> <li>\u2705 Theming HOCs</li> <li>\u2705 Codebases that haven\u2019t migrated to hooks yet</li> </ul>"},{"location":"hoc/hooks-vs-hocs/#conclusion","title":"\ud83d\udca1 Conclusion:","text":"<ul> <li>\ud83d\udc49 Use Hooks for most cases.</li> <li>\ud83d\udc49 Use HOCs only if you're dealing with access control, theming, or legacy codebases that already rely on HOCs.</li> </ul>"},{"location":"hoc/intro/","title":"Intro","text":""},{"location":"hoc/intro/#what-is-a-higher-order-component-hoc-in-react","title":"\ud83d\udcda What is a Higher-Order Component (HOC) in React?","text":"<p>A Higher-Order Component (HOC) is a function that takes a component as an argument and returns a new component. It allows you to reuse component logic by wrapping one or more components in a new component with additional functionality.</p> <p>HOCs follow the principle of \"don't repeat yourself\" (DRY) by abstracting shared logic that can be reused across multiple components.</p>"},{"location":"hoc/intro/#when-to-use-a-higher-order-component-hoc","title":"\u2699\ufe0f When to Use a Higher-Order Component (HOC)","text":"<p>Here are some common scenarios where you can use HOCs:</p> <ol> <li> <p>Access Control (Authorization)</p> <p>To protect routes or restrict access to certain components based on user roles or authentication status.</p> </li> <li> <p>Data Fetching / API Integration</p> <p>Wrap components to handle data fetching logic and pass the data as props.</p> </li> <li> <p>Conditional Rendering</p> <p>Dynamically show or hide components based on certain conditions.</p> </li> <li> <p>Logging and Analytics</p> <p>Track user interactions with specific components.</p> </li> <li> <p>Theming / Styling</p> <p>Apply consistent styles or themes to multiple components.</p> </li> <li> <p>Performance Optimization</p> <p>Use memoization or lazy loading to optimize the performance of wrapped components.</p> </li> </ol>"},{"location":"hoc/intro/#syntax-of-a-higher-order-component-in-react","title":"\ud83d\udcc4 Syntax of a Higher-Order Component in React","text":"\u2705 Basic HOC Syntax:<pre><code>import React from \"react\";\n\n// Higher-Order Component\nconst withExtraProps = (WrappedComponent) =&gt; {\n  return (props) =&gt; {\n    // Add new props or modify existing props\n    const extraProps = { additionalData: \"Hello from HOC\" };\n\n    // Return the wrapped component with new props\n    return &lt;WrappedComponent {...props} {...extraProps} /&gt;;\n  };\n};\n\n// Component to be wrapped\nconst MyComponent = (props) =&gt; {\n  return &lt;div&gt;{props.additionalData}&lt;/div&gt;;\n};\n\n// Using the HOC\nconst EnhancedComponent = withExtraProps(MyComponent);\n\nexport default EnhancedComponent;\n</code></pre>"},{"location":"hoc/intro/#example-use-cases-of-hocs","title":"\ud83d\udcc2 Example Use Cases of HOCs","text":"\u2705 1. Authorization HOC (Access Control):<pre><code>const withAuthorization = (WrappedComponent) =&gt; {\n  return (props) =&gt; {\n    const isAuthenticated = localStorage.getItem(\"token\");\n\n    if (!isAuthenticated) {\n      return &lt;h1&gt;Access Denied. Please log in.&lt;/h1&gt;;\n    }\n\n    return &lt;WrappedComponent {...props} /&gt;;\n  };\n};\n\nconst Dashboard = (props) =&gt; {\n  return &lt;h1&gt;Welcome to your Dashboard!&lt;/h1&gt;;\n};\n\nconst ProtectedDashboard = withAuthorization(Dashboard);\nexport default ProtectedDashboard;\n</code></pre> \u2705 2. Data Fetching HOC:<pre><code>import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst withDataFetching = (WrappedComponent, url) =&gt; {\n  return (props) =&gt; {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() =&gt; {\n      axios.get(url).then((response) =&gt; {\n        setData(response.data);\n        setLoading(false);\n      });\n    }, [url]);\n\n    if (loading) return &lt;h2&gt;Loading...&lt;/h2&gt;;\n\n    return &lt;WrappedComponent {...props} data={data} /&gt;;\n  };\n};\n\nconst UserList = ({ data }) =&gt; {\n  return (\n    &lt;ul&gt;\n      {data.map((user) =&gt; (\n        &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n};\n\nexport default withDataFetching(\n  UserList,\n  \"https://jsonplaceholder.typicode.com/users\"\n);\n</code></pre> \u2705 3. Logging HOC:<pre><code>const withLogging = (WrappedComponent) =&gt; {\n  return (props) =&gt; {\n    useEffect(() =&gt; {\n      console.log(\"Component Mounted:\", WrappedComponent.name);\n    }, []);\n\n    return &lt;WrappedComponent {...props} /&gt;;\n  };\n};\n\nconst Button = (props) =&gt; {\n  return &lt;button&gt;{props.label}&lt;/button&gt;;\n};\n\nexport default withLogging(Button);\n</code></pre>"},{"location":"hoc/intro/#key-points-to-remember-about-hocs","title":"\ud83d\udee0\ufe0f Key Points to Remember about HOCs:","text":"<ol> <li> <p>Pure Functions:</p> <p>HOCs are pure functions, meaning they don't modify the original component.</p> </li> <li> <p>Props Passing:</p> <p>Always pass the original props to the wrapped component to ensure no data is lost.</p> <pre><code>return &lt;WrappedComponent {...props} /&gt;;\n</code></pre> </li> <li> <p>Naming Convention:</p> <p>It\u2019s a convention to prefix the HOC function with \"with\" (e.g., <code>withAuthorization</code>, <code>withLogging</code>).</p> </li> <li> <p>Don't Use HOCs Inside the Render Method:</p> <p>Never create HOCs inside a component's render method. It can cause performance issues.</p> </li> </ol>"},{"location":"hoc/intro/#when-to-use-hocs-vs-other-patterns-hooks-render-props","title":"\ud83e\udd14 When to Use HOCs vs Other Patterns (Hooks, Render Props)?","text":"Scenario Use HOC Use Hooks Reusing logic across components \u2705 \u2705 Access control (Auth) \u2705 \u2705 Data fetching \u2705 \u2705 UI state management \u274c Use Context or Hooks \u2705 Performance optimization \u2705 \u2705"},{"location":"hoc/naming-convention/","title":"Naming Convention","text":""},{"location":"hoc/naming-convention/#naming-conventions-for-hocs-and-hooks-in-react","title":"\u2705 Naming Conventions for HOCs and Hooks in React","text":"<p>When working with HOCs and custom hooks, it's important to follow consistent naming conventions to improve code readability and maintainability.</p>"},{"location":"hoc/naming-convention/#naming-conventions-for-higher-order-components-hocs","title":"\ud83d\udcc4 Naming Conventions for Higher-Order Components (HOCs)","text":"<p>\u2705 Filename:</p> <ul> <li>Start the filename <code>with</code> with to indicate it's a HOC.</li> </ul> <p>\u2705 Example:</p> Component Purpose Filename Authorization HOC <code>withAuthorization.js</code> Logging HOC <code>withLogging.js</code> Data Fetching HOC <code>withDataFetching.js</code> <p>\u2705 Function Name:</p> <ul> <li>Use the same name as the file for consistency.</li> </ul> <pre><code>// File: withAuthorization.js\nconst withAuthorization = (WrappedComponent) =&gt; {\n  return (props) =&gt; {\n    const isAuthenticated = localStorage.getItem(\"token\");\n    return isAuthenticated ? (\n      &lt;WrappedComponent {...props} /&gt;\n    ) : (\n      &lt;h1&gt;Access Denied&lt;/h1&gt;\n    );\n  };\n};\n\nexport default withAuthorization;\n</code></pre>"},{"location":"hoc/naming-convention/#naming-conventions-for-custom-hooks","title":"\ud83d\udcc4 Naming Conventions for Custom Hooks","text":"<p>\u2705 Filename:</p> <ul> <li>Start the filename with <code>use</code> to indicate it's a hook.</li> </ul> <p>\u2705 Example:</p> Hook Purpose Filename Data Fetching Hook <code>useFetchData.js</code> Authentication Hook <code>useAuth.js</code> Debounce Hook <code>useDebounce.js</code> <p>\u2705 Function Name:</p> <ul> <li>Use the same name as the file for consistency.</li> </ul> <pre><code>// File: useFetchData.js\nimport { useState, useEffect } from \"react\";\n\nconst useFetchData = (url) =&gt; {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    fetch(url)\n      .then((response) =&gt; response.json())\n      .then((data) =&gt; {\n        setData(data);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return { data, loading };\n};\n\nexport default useFetchData;\n</code></pre>"},{"location":"hoc/naming-convention/#quick-summary-of-naming","title":"\ud83d\udcdd Quick Summary of Naming:","text":""},{"location":"hoc/naming-convention/#pro-tip","title":"\ud83d\udd25 Pro Tip:","text":"<p>Keep your HOCs inside a <code>hoc</code> folder and your hooks inside a <code>hooks</code> folder for better structure.</p> <pre><code>\ud83d\udcc2 src\n \u2523 \ud83d\udcc2 hoc\n \u2503 \u2523 \ud83d\udcc4 withAuthorization.js\n \u2503 \u2523 \ud83d\udcc4 withLogging.js\n \u2517 \ud83d\udcc2 hooks\n   \u2523 \ud83d\udcc4 useFetchData.js\n   \u2523 \ud83d\udcc4 useAuth.js\n</code></pre>"},{"location":"nextjs/intro/","title":"Intro","text":"<p>next</p>"}]}